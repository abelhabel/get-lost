

var helpers = require("../../public/helpers.js");

var minerals = require("../../public/minerals.js");
var GameObject = require("../../public/objects/gameobject.js");
var Camera = require("../../public/objects/camera.js");

var screen = require("../../public/objects/screen.js");
var Workspace = require("../../public/objects/workspace.js");
var Polygon = require("../../public/objects/polygon.js");
var Square = require("../../public/objects/square.js");
var Circle = require("../../public/objects/circle.js");
var Projectile = require("../../public/objects/projectile.js");
var Planet = require("../../public/objects/planet.js");
var BlackHole = require("../../public/objects/blackhole.js");
var Star = require("../../public/objects/star.js");
var Guardian = require("../../public/objects/guardian.js");
var Hunter = require("../../public/objects/hunter.js")
var PolygonBoss = require("../../public/objects/polygonboss.js");
var CircleBoss = require("../../public/objects/circleboss.js");
var Bosses = require("../bosses/bosses.js");
var Background = require("../../public/objects/background.js");
var Decoration = require("../../public/objects/decoration.js");
var Player = require("../../public/objects/player.js");
// var setPrototypes = require("../../public/setprototypes.js");


Camera.prototype = new GameObject();
Circle.prototype = new GameObject();
Polygon.prototype = new GameObject();
BlackHole.prototype = new GameObject();

Player.prototype = new Polygon();
Planet.prototype = new Circle();
Guardian.prototype = new Polygon();
Hunter.prototype = new Guardian();
Projectile.prototype = new Circle();
Star.prototype = new Polygon();
PolygonBoss.prototype = new Polygon();
CircleBoss.prototype = new Circle();


// console.log(new Circle());
function globalObject(){
  this.idTable = {};
  this.playersTable = {};
  this.sockets = [];
  this.projectiles = {};
  this.gridSize = 2500;
  this.populateWorld = populateWorld;
  this.workspace = new Workspace(100000, 100000, this.gridSize, this.gridSize);
}

function populateWorld(worldId) {
  var points = 20;
  var counter = 0;
  var xdir = Math.random < 0.5 ? 1 : -1;
  var planet, decoration;
  console.log(this.workspace.id);
  var go = this;
  var keys = Object.keys(go.workspace.grid);
  var key, planet, guardian;
  var rangeX = go.workspace.gridSizeX;
  var rangeY = go.workspace.gridSizeY;
  for(var i = 0; i < keys.length; i += 1 ) {
    key = keys[i];
    var xy = key.split(':');
    var baseX = parseInt(xy[0]);
    var baseY = parseInt(xy[1])
    var x = baseX + parseInt(Math.random() * rangeX);
    var y = baseY + parseInt(Math.random() * rangeY);
    var nextOffsetX = 0;
    var nextOffsetY = 0;
    var radian = 0.3;
    while(counter < points) {
      radian += Math.random() * Math.PI * 2;// + (Math.random() * Math.PI * 2);
      x = (baseX + (rangeX / 2)) + (rangeX/4) * Math.cos(radian);
      y = (baseY + (rangeY / 2)) + (rangeY/4) * Math.sin(radian);
      planet = new Planet(x, y);
      counter += planet.size;
      // planet.posx = baseX + nextOffsetX;
      // planet.posy = baseY + nextOffsetY;
      xdir = Math.random() < 0.5 ? 1 : -1;
      nextOffsetX += planet.r * 2 * xdir;
      nextOffsetY += planet.r * 2;

      planet.worldId = worldId;
      go.idTable[planet.id] = planet;
      go.workspace.addToGrid(planet);

      if(Math.random() > 0.8) {
        guardian = new Guardian(planet.posx, planet.posy, planet);
        guardian.worldId = worldId;
        // guardian.xp = guardian.points * guardian.reloadSpeed / 30;
        go.idTable[guardian.id] = guardian;
        go.workspace.addToGrid(guardian);
      }
    }
    radian = 0.3;
    counter = 0;
    //decorations
    while(counter < points) {
      x = baseX + Math.random() * rangeX;
      y = baseY + Math.random() * rangeY;
      
      decoration = new Decoration(x, y);
      counter += decoration.size / 5;
      decoration.worldId = worldId;
      go.idTable[decoration.id] = decoration;
      go.workspace.addToGrid(decoration);
    }
    counter = 0;
    // if(i % 2 == 0) {
    //   planet = new Planet(x, y)
    //   planet.worldId = worldId;
    //   go.idTable[planet.id] = planet;
    //   guardian = new Guardian(x, y, planet);
    //   guardian.worldId = worldId;
    //   go.idTable[guardian.id] = guardian;
    //   go.workspace.addToGrid(planet);
    //   go.workspace.addToGrid(guardian);
    //   // go.workspace.addToGrid(new Star(x, y));
    // }else{
    //   planet = new Planet(x, y);
    //   planet.worldId = worldId;
    //   go.idTable[planet.id] = planet;
    //   planet.adventure = "http://www.prepressed.se/Games/adventure";
    //   go.workspace.addToGrid(planet);


    //   // go.workspace.addToGrid(new Star(x, y, Math.round(Math.random() * 100)));
    // } 

  }
  var boss = Bosses.glowFace(10000 + Math.random() * 90000, 10000 + Math.random() * 90000);
  boss.forEach(function(obj){
    obj.worldId = worldId;
    go.idTable[obj.id] = obj;
    go.workspace.addToGrid(obj);
  });

  boss = Bosses.spherlo(10000 + Math.random() * 90000, 10000 + Math.random() * 90000);
  boss.forEach(function(obj){
    obj.worldId = worldId;
    go.idTable[obj.id] = obj;
    go.workspace.addToGrid(obj);
  });
}
module.exports = globalObject;